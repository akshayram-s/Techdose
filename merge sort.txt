class Solution {
public:
    void merge(vector<int>& nums, int first, int mid, int last){
        int n_start = first, n_end = mid + 1, n = 0;
        vector<int>hold(last - first + 1,0);
        
        for(int x = first; x <= last; x++){
            if(n_start > mid)
                hold[n++] = nums[n_end++];
            
            else if(n_end > last)
                hold[n++] = nums[n_start++];
            
            else if(nums[n_start] < nums[n_end])
                hold[n++] = nums[n_start++];
            
            else{hold[n++] = nums[n_end++];}
        }
        
        for(int x = 0; x < n; x++){
            nums[first++] = hold[x];
        }
        
    }
    
    void mergeSort(vector<int>& nums, int first, int last){
        if(first < last){
            int mid = (first + last)/2;
                
            mergeSort(nums, first, mid);
            mergeSort(nums, mid+1, last);
            merge(nums, first, mid, last);
        }
    }
        
    vector<int> sortArray(vector<int>& nums) {
    int last = nums.size()-1;
    int first = 0;
        
    mergeSort(nums, first, last);  
        
    return nums;}
};
